<?xml version="1.0" encoding="UTF-8"?>
<project name="TaintTracking" basedir="../" default="end" >
    
    <!--    Please modify these paths according to your settings. For relative paths use the attribute "location" 
            and a relative from the workspace folder, for absolute paths use the attribute "value".     -->
         <!-- Path to the JUnit jar. -->
         <property name="junit.jar" value="/Users/tVogel/Downloads/junit-4.11.jar" />
         <!-- Path to the Hamcrest jar. -->
         <property name="hamcrest.jar" value="/Users/tVogel/Downloads/hamcrest-all-1.3.jar" />
         <!-- Path to the Soot project. -->
         <property name="soot.dir" value="/Users/tVogel/Documents/workspace/Soot" />
         <!-- Path to the SootUtils project. -->
         <property name="sootUtils.dir" location="SootUtils" />
         <!-- Path to the Annotations project. -->
         <property name="annotations.dir" location="Annotations" />
         <!-- Path to the TaintTracking project. -->
         <property name="taintTracking.dir" location="TaintTracking" />
         <!-- Path to the Testcases project. -->
         <property name="testcases.dir" location="Testcases" />
         <!-- Initial class of the failing testcases. -->
         <property name="testcases.class.failing" value="taintTrackingFail.TaintTrackingFail" />
         <!-- Initial class of the successing testcases. -->
         <property name="testcases.class.success" value="taintTrackingSuccess.TaintTrackingSuccess" />
         <!-- Should compile the Soot project? -->
         <property name="enable.soot.compile" value="false" />
         <!-- Path to the Soot jar. -->
         <property name="soot.jar" value="/Users/tVogel/Downloads/soot-2.5.0.jar" />
         <!-- Path to the rt jar. -->
         <property name="rt.jar" value="/Library/Java/JavaVirtualMachines/jdk1.7.0_21.jdk/Contents/Home/jre/lib/rt.jar" />
         <!-- Should test the result? -->
         <property name="enable.junit" value="true" />
         <!-- Should print the jimple source code? -->
         <property name="enable.jimple" value="true" />
         <!-- Should print the javadoc? -->
         <property name="enable.javadoc" value="true" />
       
         
<!--_________________________________________________________________-->   
            <!-- DO NOT TOUCH THE FOLLOWING LINES! -->
<!--_________________________________________________________________--> 
   
    <!-- Properties: -->
      <!-- General properties: -->
        <!-- Names: -->
        <property name="build.dir.name" value="bin" />
        <property name="src.dir.name" value="src" />
        <property name="lib.dir.name" value="lib" />
        <property name="temp.dir.name" value="temp" />
        <property name="output.dir.name" value="output" />
        <property name="jimple.dir.name" value="jimple" />
        <property name="report.dir.name" value="report" />
        <property name="junit.dir.name" value="junit" />
        <property name="javadoc.dir.name" value="javadoc" />
        <property name="serialize.dir.name" value="serialize" />
        <property name="soot.jar.name" value="Soot.jar" />
        <property name="junit.jar.name" value="JUnit.jar" />
        <property name="hamcrest.jar.name" value="Hamcrest.jar" />
        <property name="taintTracking.jar.name" value="TaintTracking.jar" />
        <property name="annotations.jar.name" value="Annotations.jar" />
        <property name="sootUtils.jar.name" value="SootUtils.jar" />
        <property name="rt.jar.name" value="rt.jar" />
        <property name="testcases.jar.name" value="Testcases.jar" />
        
        <!-- Relative pahts: -->
        <property name="build.dir" value="/${build.dir.name}" />
        <property name="src.dir" value="/${src.dir.name}" />
        <property name="lib.dir" value="/${lib.dir.name}" />
        <property name="output.dir" value="/${output.dir.name}" />
        <property name="serialize.dir" value="/${serialize.dir.name}" /> 
        <property name="temp.dir" value="/${temp.dir.name}" />
        <property name="report.dir" value="/${report.dir.name}" />
        <property name="jimple.dir" value="/${jimple.dir.name}" />
        <property name="junit.dir" value="/${junit.dir.name}" />
        <property name="javadoc.dir" value="/${javadoc.dir.name}" />
        
        <!-- Absolute pahts: -->
        <property name="output.home" value="${testcases.dir}${output.dir}" />
        <property name="temp.home" value="${output.home}${temp.dir}" />
        <property name="report.home" value="${output.home}${report.dir}" />
        <property name="jimple.home" value="${output.home}${jimple.dir}" />
        <property name="javadoc.home" value="${output.home}${javadoc.dir}" />
        
      <!-- TaintTracking properties: -->
        <property name="taintTracking.src.dir" value="${taintTracking.dir}${src.dir}" />
        <property name="taintTracking.build.dir" value="${taintTracking.dir}${build.dir}" />
        <property name="taintTracking.output.dir" value="${taintTracking.dir}${output.dir}" />
        <property name="taintTracking.serialize.dir" value="${taintTracking.dir}${output.dir}${serialize.dir}" />
        
      <!-- Soot properties: --> 
        <property name="soot.src.dir" value="${soot.dir}${src.dir}"/>
        <property name="soot.build.dir" value= "${soot.dir}${build.dir}"/>
        <property name="soot.options.dir" value="${soot.dir}/options"/>
        <property name="soot.sablecc.dir" value="${soot.dir}/sablecc"/>
        <property name="soot.singletons.dir" value="${soot.dir}/singletons"/>
        <property name="soot.lib.dir" value= "${soot.dir}${lib.dir}"/>
        <property name="soot.ant.jar" value= "${soot.dir}${lib.dir}/ant.jar"/>
        <property name="soot.jasmin.jar" value= "${soot.dir}${lib.dir}/jasminclasses-2.5.0.jar"/>
        <property name="soot.polyglot.jar" value= "${soot.dir}${lib.dir}/polyglot.jar"/>
        <property name="soot.soot.jar" value= "${soot.dir}${lib.dir}/sootclasses-2.5.0.jar"/>
        
      <!-- Annotations properties: -->
        <property name="annotations.src.dir" value="${annotations.dir}${src.dir}"/>
        <property name="annotations.build.dir" value= "${annotations.dir}${build.dir}"/>
        
      <!-- SootUtils properties: -->
        <property name="sootUtils.src.dir" value="${sootUtils.dir}${src.dir}"/>
        <property name="sootUtils.build.dir" value= "${sootUtils.dir}${build.dir}"/>
        
      <!-- Specific JUnit tests -->
        <property name="junit.test.checker.name" value="LevelChecker.java" />
        <property name="junit.test.fail.name" value="AnalysisFail.java" />
        <property name="junit.test.success.name" value="AnalysisSuccess.java" />
        
      <!-- Testcases properties: -->
        <property name="testcases.src.dir" value="${testcases.dir}${src.dir}"/>
        <property name="testcases.build.dir" value="${testcases.dir}${build.dir}"/>
        <loadresource property="testcases.failing.path">
            <propertyresource name="testcases.class.failing" />
                <filterchain>
                    <tokenfilter>
                        <filetokenizer />
                        <replacestring from="." to="/" />
                    </tokenfilter>
                </filterchain>
        </loadresource>
        <loadresource property="testcases.success.path">
            <propertyresource name="testcases.class.success" />
                <filterchain>
                    <tokenfilter>
                        <filetokenizer />
                        <replacestring from="." to="/" />
                    </tokenfilter>
                </filterchain>
        </loadresource>
        <property name="testcases.failing.file" value="${testcases.src.dir}/${testcases.failing.path}.java" />
        <property name="testcases.success.file" value="${testcases.src.dir}/${testcases.success.path}.java" />
        
    <!-- Prechecks: -->
	  <!-- Precheck of the TaintTracking: -->
	    <condition property="taintTracking.exists">
	        <resourceexists>
	            <file file="${taintTracking.dir}"/>
	        </resourceexists>
	    </condition>
        
	    <target name="precheck.taintTracking.ok" if="taintTracking.exists">
            <echo level="info">TaintTracking root directory: OK</echo>
        </target>
	    
        <target name="precheck.taintTracking.fail" unless="taintTracking.exists">
            <fail>TaintTracking root directory doesn't exist.</fail>
        </target>
        
        <condition property="taintTracking.src.exists">
            <resourceexists>
                <file file="${taintTracking.src.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.taintTracking.src" unless="taintTracking.src.exists" depends="precheck.taintTracking.ok, precheck.taintTracking.fail">
            <fail>TaintTracking source directory '${taintTracking.src.dir}' doesn't exist.</fail>
        </target>
        
        <condition property="taintTracking.build.exists">
            <resourceexists>
                <file file="${taintTracking.build.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.taintTracking.build.ok" if="taintTracking.build.exists">
            <delete dir="${taintTracking.build.dir}" />
        </target>
        
        <target name="precheck.taintTracking.build" depends="precheck.taintTracking.build.ok, precheck.taintTracking.ok, precheck.taintTracking.fail">
            <mkdir dir="${taintTracking.build.dir}" />
        </target>

        <target name="precheck.taintTracking" depends="precheck.taintTracking.ok, precheck.taintTracking.fail, precheck.taintTracking.src, precheck.taintTracking.build">
            <echo level="info">Pre-check and preparation of the project 'TaintTracking' successful.</echo>
        </target>
        
      <!-- Precheck of the Testcases: -->
        <condition property="testcases.exists">
            <resourceexists>
                <file file="${testcases.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.testcases.ok" if="testcases.exists">
            <echo level="info">Testcases root directory: OK</echo>
        </target>
        
        <target name="precheck.testcases.fail" unless="testcases.exists">
            <fail>Testcases root directory doesn't exist '${testcases.dir}'.</fail>
        </target>
        
        <condition property="testcases.src.exists">
            <resourceexists>
                <file file="${testcases.src.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.testcases.src" unless="testcases.src.exists" depends="precheck.testcases.ok, precheck.testcases.fail">
            <fail>Testcases source directory '${testcases.src.dir}' doesn't exist.</fail>
        </target>
        
        <condition property="testcases.classes.exists">
            <and>
                <resourceexists>
                    <file file="${testcases.failing.file}"/>
                </resourceexists>
                <resourceexists>
                    <file file="${testcases.failing.file}"/>
                </resourceexists>
            </and>
        </condition>
        
        <target name="precheck.testcases.classes.ok" if="testcases.classes.exists">
            <echo level="info">Inital testcase classes: OK</echo>
        </target>
        
        <target name="precheck.testcases.classes.fail" unless="testcases.classes.exists">
            <fail>Testcase: one or both testcase classes do not exist (${testcases.failing.file} / ${testcases.success.file}).</fail>
        </target>
        
        <condition property="testcases.build.exists">
            <resourceexists>
                <file file="${testcases.build.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.testcases.build.ok" if="testcases.build.exists">
            <delete dir="${testcases.build.dir}" />
        </target>
        
        <target name="precheck.testcases.build" depends="precheck.testcases.build.ok, precheck.testcases.ok, precheck.testcases.fail">
            <mkdir dir="${testcases.build.dir}" />
        </target>

        <target name="precheck.testcases" depends="precheck.testcases.ok, precheck.testcases.fail, precheck.testcases.src, precheck.testcases.classes.ok, precheck.testcases.classes.fail, precheck.testcases.build">
            <echo level="info">Pre-check and preparation of the project 'Testcases' successful.</echo>
        </target>
       
      <!-- Precheck folder structure -->
        <condition property="output.exists">
            <resourceexists>
                <file file="${output.home}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.output.ok" if="output.exists">
            <delete dir="${output.home}" />
        </target>
        
        <target name="precheck.output" depends="precheck.output.ok, precheck.testcases">
            <mkdir dir="${output.home}" />
            <echo level="info">Output directory: OK (${output.home})</echo>
        </target>
       
        <condition property="temp.exists">
            <resourceexists>
                <file file="${temp.home}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.temp.ok" if="temp.exists">
            <delete dir="${temp.home}" />
        </target>
        
        <target name="precheck.temp" depends="precheck.temp.ok, precheck.testcases">
            <mkdir dir="${temp.home}" />
            <echo level="info">Temp directory: OK (${temp.home})</echo>
        </target>
        
        <condition property="report.exists">
            <resourceexists>
                <file file="${report.home}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.report.ok" if="report.exists">
            <delete dir="${report.home}" />
        </target>
        
        <target name="precheck.report" depends="precheck.report.ok, precheck.testcases">
            <mkdir dir="${report.home}" />
            <echo level="info">Report directory: OK (${report.home})</echo>
        </target>
        
        <condition property="jimple.exists">
            <resourceexists>
                <file file="${jimple.home}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.jimple.ok" if="jimple.exists">
            <delete dir="${jimple.home}" />
        </target>
        
        <target name="precheck.jimple" depends="precheck.jimple.ok, precheck.testcases">
            <mkdir dir="${jimple.home}" />
            <echo level="info">Jimple directory: OK (${jimple.home})</echo>
        </target>
        
        <condition property="javadoc.exists">
            <resourceexists>
                <file file="${javadoc.home}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.javadoc.ok" if="javadoc.exists">
            <delete dir="${javadoc.home}" />
        </target>
        
        <target name="precheck.javadoc" depends="precheck.javadoc.ok, precheck.testcases">
            <mkdir dir="${javadoc.home}" />
            <echo level="info">JavaDoc directory: OK (${javadoc.home})</echo>
        </target>
        
        <target name="precheck.folders" depends="precheck.testcases, precheck.output, precheck.jimple, precheck.report, precheck.temp, precheck.javadoc">
            <echo level="info">Pre-check and preparation of the folders successful.</echo>
        </target>
        
      <!-- Precheck of the SootUtils: -->
        <condition property="sootUtils.exists">
            <resourceexists>
                <file file="${sootUtils.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.sootUtils.ok" if="sootUtils.exists">
            <echo level="info">SootUtils root directory: OK</echo>
        </target>
        
        <target name="precheck.sootUtils.fail" unless="sootUtils.exists">
            <fail>SootUtils root directory doesn't exist.</fail>
        </target>
        
        <condition property="sootUtils.src.exists">
            <resourceexists>
                <file file="${sootUtils.src.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.sootUtils.src" unless="sootUtils.src.exists" depends="precheck.sootUtils.ok, precheck.sootUtils.fail">
            <fail>SootUtils source directory '${sootUtils.src.dir}' doesn't exist.</fail>
        </target>
        
        <condition property="sootUtils.build.exists">
            <resourceexists>
                <file file="${sootUtils.build.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.sootUtils.build.ok" if="sootUtils.build.exists">
            <delete dir="${sootUtils.build.dir}" />
        </target>
        
        <target name="precheck.sootUtils.build" depends="precheck.sootUtils.build.ok, precheck.sootUtils.ok, precheck.sootUtils.fail">
            <mkdir dir="${sootUtils.build.dir}" />
        </target>

        <target name="precheck.sootUtils" depends="precheck.sootUtils.ok, precheck.sootUtils.fail, precheck.sootUtils.src, precheck.sootUtils.build">
            <echo level="info">Pre-check and preparation of the project 'SootUtils' successful.</echo>
        </target>
        
        <!-- Precheck of the Annotations: -->
        <condition property="annotations.exists">
            <resourceexists>
                <file file="${annotations.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.annotations.ok" if="annotations.exists">
            <echo level="info">Annotations root directory: OK</echo>
        </target>
        
        <target name="precheck.annotations.fail" unless="annotations.exists">
            <fail>Annotations root directory doesn't exist '${annotations.dir}'.</fail>
        </target>
        
        <condition property="annotations.src.exists">
            <resourceexists>
                <file file="${annotations.src.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.annotations.src" unless="annotations.src.exists" depends="precheck.annotations.ok, precheck.annotations.fail">
            <fail>Annotations source directory '${annotations.src.dir}' doesn't exist.</fail>
        </target>
        
        <condition property="annotations.build.exists">
            <resourceexists>
                <file file="${annotations.build.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.annotations.build.ok" if="annotations.build.exists">
            <delete dir="${annotations.build.dir}" />
        </target>
        
        <target name="precheck.annotations.build" depends="precheck.annotations.build.ok, precheck.annotations.ok, precheck.annotations.fail">
            <mkdir dir="${annotations.build.dir}" />
        </target>

        <target name="precheck.annotations" depends="precheck.annotations.ok, precheck.annotations.fail, precheck.annotations.src, precheck.annotations.build">
            <echo level="info">Pre-check and preparation of the project 'Annotations' successful.</echo>
        </target>
        
      <!-- Precheck of the Soot: -->
        <condition property="disable.soot.compile">
            <not>
                <istrue value="${enable.soot.compile}" />
            </not>
        </condition>
        
        <condition property="soot.exists">
            <resourceexists>
                <file file="${soot.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.soot.ok" unless="${disable.soot.compile}" if="soot.exists">
            <echo level="info">Soot root directory: OK</echo>
        </target>
        
        <target name="precheck.soot.fail" if="${enable.soot.compile}" unless="soot.exists" >
            <fail>Soot root directory doesn't exist '${soot.dir}'.</fail>
        </target>
        
        <condition property="soot.folders.exists">
            <and>
	            <resourceexists>
	                <file file="${soot.src.dir}"/>
	            </resourceexists>
	            <resourceexists>
	                <file file="${soot.lib.dir}"/>
	            </resourceexists>
	            <resourceexists>
	                <file file="${soot.options.dir}"/>
	            </resourceexists>
	            <resourceexists>
	                <file file="${soot.sablecc.dir}"/>
	            </resourceexists>
	            <resourceexists>                
	                <file file="${soot.singletons.dir}"/>
	            </resourceexists>
            </and>
        </condition>
        
        <target name="precheck.soot.folders.ok" unless="${disable.soot.compile}" if="soot.folders.exists">
            <echo level="info">Soot subdirectories: OK</echo>
        </target>
        
        <target name="precheck.soot.folders.fail" if="${enable.soot.compile}" unless="soot.folders.exists">
            <fail>Soot: one or more subdirectory do not exist (${soot.src.dir}, ${soot.lib.dir}, ${soot.options.dir}, ${soot.sablecc.dir}, ${soot.singletons.dir}).</fail>
        </target>
        
        <condition property="soot.build.exists">
            <resourceexists>
                <file file="${soot.build.dir}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.soot.build.ok" if="soot.build.exists" unless="${disable.soot.compile}">
            <delete dir="${soot.build.dir}" />
        </target>
        
        <target name="precheck.soot.build" depends="precheck.soot.build.ok, precheck.soot.ok, precheck.soot.fail" if="${enable.soot.compile}">
            <mkdir dir="${soot.build.dir}" />
        </target>
        
        <condition property="soot.libs.exists">
            <and>
                <resourceexists>
                    <file file="${soot.ant.jar}"/>
                </resourceexists>
                <resourceexists>
                    <file file="${soot.jasmin.jar}"/>
                </resourceexists>
                <resourceexists>
                    <file file="${soot.polyglot.jar}"/>
                </resourceexists>
                <resourceexists>
                    <file file="${soot.soot.jar}"/>
                </resourceexists>
            </and>
        </condition>
        
        <target name="precheck.soot.libs.ok" unless="${disable.soot.compile}" if="soot.libs.exists">
            <echo level="info">Soot libraries: OK</echo>
        </target>
        
        <target name="precheck.soot.libs.fail" if="${enable.soot.compile}" unless="soot.libs.exists">
            <fail>Soot: one or more libraries do not exist (${soot.ant.jar}, ${soot.jasmin.jar}, ${soot.polyglot.jar}, ${soot.soot.jar}).</fail>
        </target>
        
        <condition property="soot.jar.exists">
            <resourceexists>
                <file file="${soot.jar}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.soot.jar.ok" unless="${enable.soot.compile}" if="${soot.jar.exists}">
            <copy file="${soot.jar}" tofile="${temp.home}/${soot.jar.name}" />
            <echo level="info">Soot jar: OK</echo>
        </target>
        
        <target name="precheck.soot.jar.fail" if="${disable.soot.compile}" unless="${soot.jar.exists}">
            <echo level="warning">Soot jar not found (${soot.jar})! Download of the soot-2.5.0.jar</echo> 
            <get src="http://www.sable.mcgill.ca/software/soot-2.5.0.jar" dest="${temp.home}/${soot.jar.name}" />
        </target>
        
        <target name="precheck.soot.jar" depends="precheck.soot.jar.ok, precheck.soot.jar.fail" unless="${enable.soot.compile}">
            <echo level="info">Preparation of the Soot successful.</echo>
        </target>
        
        <target name="precheck.soot" depends="precheck.soot.ok, precheck.soot.fail, precheck.soot.folders.ok, precheck.soot.folders.fail, precheck.soot.build, precheck.soot.libs.ok, precheck.soot.libs.fail, precheck.soot.jar">
            <echo level="info">Pre-check and preparation of the Soot project successful.</echo>
        </target>
                
	  <!-- Precheck of the JUnit: -->
	    <condition property="junit.exists">
		    <resourceexists>
		        <file file="${junit.jar}"/>
		    </resourceexists>
	    </condition>
	    
	    <target name="precheck.junit.fail" unless="junit.exists">
	       <echo level="warning">JUnit jar not found (${junit.jar})! Download of the junit-4.11.jar</echo> 
	       <get src="http://search.maven.org/remotecontent?filepath=junit/junit/4.11/junit-4.11.jar" dest="${temp.home}/${junit.jar.name}" />
	    </target>
	    
	    <target name="precheck.junit.ok" if="junit.exists">
	        <copy file="${junit.jar}" tofile="${temp.home}/${junit.jar.name}" />
	        <echo level="info">JUnit jar: OK</echo>
	    </target>
	    
	    <target name="precheck.junit" depends="precheck.junit.ok, precheck.junit.fail">
            <echo level="info">Pre-check and preparation of the 'JUnit' successful.</echo>
        </target>
	        
	  <!-- Precheck of the Hamcrest: -->
	    <condition property="hamcrest.exists">
	        <resourceexists>
	            <file file="${hamcrest.jar}"/>
	        </resourceexists>
	    </condition>
	    
	    <target name="precheck.hamcrest.fail" unless="hamcrest.exists">
	       <echo level="warning">Hamcrest jar not found (${hamcrest.jar})! Download of the jhamcrest-all-1.3.jar</echo> 
	       <get src="http://hamcrest.googlecode.com/files/hamcrest-all-1.3.jar" dest="${temp.home}/${hamcrest.jar.name}" />
	    </target>
	    
	    <target name="precheck.hamcrest.ok" if="hamcrest.exists">
	        <copy file="${hamcrest.jar}" tofile="${temp.home}/${hamcrest.jar.name}" />
	        <echo level="info">Hamcrest jar: OK</echo>
	    </target>
	    
	    <target name="precheck.hamcrest" depends="precheck.hamcrest.ok, precheck.hamcrest.fail">
            <echo level="info">Pre-check and preparation of the 'Hamcrest' successful.</echo>
        </target>
        
	  <!-- Precheck of the rt: -->        
        <condition property="rt.exists">
            <resourceexists>
                <file file="${rt.jar}"/>
            </resourceexists>
        </condition>
        
        <target name="precheck.rt.ok" if="${rt.exists}">
            <copy file="${rt.jar}" tofile="${temp.home}/${rt.jar.name}" />
            <echo level="info">Rt jar: OK</echo>
        </target>
        
        <target name="precheck.rt.fail" unless="${rt.exists}">
            <fail>Rt jar not found (${rt.jar})! Please apdopt the path to this jar file.</fail> 
        </target>
        
        <target name="precheck.rt" depends="precheck.rt.ok, precheck.rt.fail">
            <echo level="info">Pre-check and preparation of the Rt successful.</echo>
        </target>     
          
    <target name="precheck" depends="precheck.taintTracking, precheck.testcases, precheck.folders, precheck.sootUtils, precheck.annotations, precheck.soot, precheck.junit, precheck.hamcrest, precheck.rt">
        <echo level="info">PRE-CHECK AND PREPARATION SUCCESSFUL.</echo>
    </target>
    
    <!-- Information section -->
    <target name="information" depends="precheck">
        <tstamp>
            <format property="current.time" pattern="dd/MM/yyyy HH:mm:ss" />
        </tstamp>
        <echo level="info">
            Run JUnit Testcases for TaintTracking-Analysis
            Author: Thomas Vogel (vogelt@informatik.uni-freiburg.de)
            Execution time: ${current.time}
            Base directory: ${basedir}
            Soot directory: ${soot.dir}
            TaintTracking directory: ${taintTracking.dir}
            SootUtils directory: ${sootUtils.dir}
            Annotations directory: ${annotations.dir}
            JUnit jar path: ${junit.jar}
            Hamcrest jar path: ${hamcrest.jar}
            Rt jar path: ${rt.jar}
            Enable Soot compilation: ${enable.soot.compile}
            Soot jar: ${soot.jar}
            Testcase path: ${testcases.dir}
            Initial testcase classes: 
                ${testcases.class.failing} (${testcases.failing.file}) / 
                ${testcases.class.success} (${testcases.success.file})</echo>
    </target>
    
    <!-- Compilation section -->
    
      <!-- Compile Soot -->
        <path id="classpath.soot">
            <fileset dir="${soot.lib.dir}" />
            <fileset dir="${temp.home}" />
        </path>
        
        <target name="compile.soot" if="${enable.soot.compile}">
            <javac srcdir="${soot.dir}" destdir="${soot.build.dir}" classpathref="classpath.soot" includeantruntime="false"/>
            <jar destfile="${temp.home}/${soot.jar.name}" basedir="${soot.build.dir}" />
        </target>
        
      <!-- Compile SootUtils -->
        <path id="classpath.sootUtils">
            <fileset dir="${temp.home}" />
        </path>
        
        <target name="compile.sootUtils" depends="compile.soot">
            <javac srcdir="${sootUtils.src.dir}" destdir="${sootUtils.build.dir}" classpathref="classpath.sootUtils" includeantruntime="false"/>
            <jar destfile="${temp.home}/${sootUtils.jar.name}" basedir="${sootUtils.build.dir}" />
        </target>
        
      <!-- Compile Annotations -->
        <path id="classpath.annotations">
            <fileset dir="${temp.home}" />
        </path>
        
        <target name="compile.annotations" depends="compile.soot, compile.sootUtils">
            <javac srcdir="${annotations.src.dir}" destdir="${annotations.build.dir}" classpathref="classpath.annotations" includeantruntime="false"/>
            <jar destfile="${temp.home}/${annotations.jar.name}" basedir="${annotations.build.dir}" />
        </target>
        
      <!-- Compile TaintTracking -->
        <path id="classpath.taintTracking">
            <fileset dir="${temp.home}" />
        </path>
        
        <target name="compile.taintTracking" depends="compile.soot, compile.sootUtils, compile.annotations">
            <javac srcdir="${taintTracking.src.dir}" destdir="${taintTracking.build.dir}" classpathref="classpath.taintTracking" includeantruntime="false"/>
            <jar destfile="${temp.home}/${taintTracking.jar.name}" basedir="${taintTracking.build.dir}">
                <manifest>
                    <attribute name="Main-Class" value="analysis.Main"/>
                </manifest>
            </jar>
        </target>
        
      <!-- Compile Testcases -->
        <path id="classpath.testcases">
            <fileset dir="${temp.home}" />
        </path>
        
        <target name="compile.testcases" depends="compile.soot, compile.sootUtils, compile.annotations, compile.taintTracking">
            <javac srcdir="${testcases.src.dir}" destdir="${testcases.build.dir}" classpathref="classpath.testcases" includeantruntime="false"/>
            <jar destfile="${temp.home}/${testcases.jar.name}" basedir="${testcases.build.dir}" />
        </target>  
        
        <target name="compile" depends="information, compile.soot, compile.sootUtils, compile.annotations, compile.taintTracking">
            <echo level="info">COMPILATION SUCCESSFUL.</echo>
        </target>
        
      <!-- Pre JUnit Tests --> 
        <path id="classpath.pre.junit">
            <fileset dir="${temp.home}" />
        </path>
         
        <target name="pre.junit.various" if="${enable.junit}">
            <junit printsummary="withOutAndErr" fork="true" haltonfailure="false" haltonerror="true">
                <classpath refid="classpath.pre.junit" />
                <formatter type="plain" />
                <batchtest todir="${report.home}">
                    <path>
                        <fileset dir="${sootUtils.src.dir}">
                            <include name="junit/PreTest*.java" />
                        </fileset>
                        <fileset dir="${annotations.src.dir}">
                            <include name="junit/PreTest*.java" />
                        </fileset>
                        <fileset dir="${taintTracking.src.dir}">
                            <include name="junit/PreTest*.java" />
                        </fileset>
                    </path>
                </batchtest>
            </junit>
        </target>
        
        <target name="junit.checker" if="${enable.junit}">
            <junit printsummary="withOutAndErr" fork="true" haltonfailure="false" haltonerror="true" dir="${testcases.src.dir}">
                <classpath refid="classpath.pre.junit" />
                <formatter type="plain" />
                <batchtest todir="${report.home}">
                    <path>
                        <fileset dir="${taintTracking.src.dir}">
                            <include name="${junit.dir.name}/${junit.test.checker.name}" />
                        </fileset>
                    </path>
                </batchtest>
            </junit>
        </target>
        
        <target name="pre.junit" depends="compile, pre.junit.various, junit.checker" if="${enable.junit}">
            <echo level="info">PRE-TESTS SUCCESSFUL.</echo>
        </target>
      <!-- Generate the jimple code -->      
        <target name="output.jimple" depends="pre.junit" if="${enable.jimple}">
            <java jar="${temp.home}/${soot.jar.name}"  fork='true' dir="${testcases.src.dir}">
                <arg line="--xml-attributes --f J --src-prec java --cp ${rt.jar}:${testcases.src.dir}:${annotations.src.dir}  --d ${jimple.home} ${testcases.class.failing} ${testcases.class.success}" />
            </java>
        </target>
        
        <target name="output" depends="output.jimple" if="${enable.jimple}">
            <echo level="info">EXPORTING JIMPLE SUCCESSFUL.</echo>
        </target>
      
      <!-- Analysis of failing testcases -->
        <path id="classpath.analysis.fail">
            <fileset dir="${temp.home}" />
            <pathelement location="${testcases.src.dir}" />
        </path>
        
       <target name="analysis.fail" depends="output">
            <java classname="analysis.Main" fork="true" dir="${testcases.src.dir}" classpathref="classpath.analysis.fail">
                <arg line="-pp -f n -no-bodies-for-excluded -log-levels no -export-file -keep-line-number ${testcases.class.failing}"/>
            </java>
        </target>
        
      <!-- JUnit Tests for failing testcases -->
        <path id="classpath.junit.fail">
            <fileset dir="${temp.home}" />
        </path>
           
        <target name="junit.fail" depends="analysis.fail" if="${enable.junit}">
            <junit printsummary="withOutAndErr" fork="true" haltonfailure="false" haltonerror="true" dir="${testcases.src.dir}">
                <classpath refid="classpath.junit.fail" />
                <formatter type="plain" />
                <batchtest todir="${report.home}">
                    <path>
                        <fileset dir="${sootUtils.src.dir}">
                            <include name="${junit.dir.name}/${junit.test.fail.name}" />
                        </fileset>
                    </path>
                </batchtest>
            </junit>
        </target>
    
      <!-- Analysis of successful testcases -->
        <path id="classpath.analysis.success">
            <fileset dir="${temp.home}" />
            <pathelement location="${testcases.src.dir}" />
        </path>
        
       <target name="analysis.success" depends="output">
            <java classname="analysis.Main" fork="true" dir="${testcases.src.dir}" classpathref="classpath.analysis.success">
                <arg line="-pp -f n -no-bodies-for-excluded -log-levels no -export-file -keep-line-number ${testcases.class.success}"/>
            </java>
        </target>
        
      <!-- JUnit Tests for successful testcases -->
        <path id="classpath.junit.success">
            <fileset dir="${temp.home}" />
        </path>
           
        <target name="junit.success" depends="analysis.success" if="${enable.junit}">
            <junit printsummary="withOutAndErr" fork="true" haltonfailure="false" haltonerror="true" dir="${testcases.src.dir}">
                <classpath refid="classpath.junit.success" />
                <formatter type="plain" />
                <batchtest todir="${report.home}">
                    <path>
                        <fileset dir="${sootUtils.src.dir}">
                            <include name="${junit.dir.name}/${junit.test.success.name}" />
                        </fileset>
                    </path>
                </batchtest>
            </junit>
        </target>
        
        <target name="analysis" depends="output, analysis.fail, junit.fail, analysis.success, junit.success">
            <echo level="info">RUNNING ANALYSES SUCCESSFUL.</echo>
        </target>
        
      <!-- Post JUnit Tests --> 
        <path id="classpath.post.junit">
            <fileset dir="${temp.home}" />
        </path>
         
        <target name="post.junit.various" if="${enable.junit}">
            <junit printsummary="withOutAndErr" fork="true" haltonfailure="false" haltonerror="true">
                <classpath refid="classpath.post.junit" />
                <formatter type="plain" />
                <batchtest todir="${report.home}">
                    <path>
                        <fileset dir="${sootUtils.src.dir}">
                            <include name="junit/PostTest*.java" />
                        </fileset>
                        <fileset dir="${annotations.src.dir}">
                            <include name="junit/PostTest*.java" />
                        </fileset>
                        <fileset dir="${taintTracking.src.dir}">
                            <include name="junit/PostTest*.java" />
                        </fileset>
                    </path>
                </batchtest>
            </junit>
        </target>
        
        <target name="post.junit" depends="analysis, post.junit.various" if="${enable.junit}">
            <echo level="info">POST-TESTS SUCCESSFUL.</echo>
        </target>
        
      <!-- Generate JavaDoc -->
        <target name="javadoc" depends="post.junit" if="${enable.javadoc}">
            
            <path id="classpath.javadoc">
                <fileset dir="${taintTracking.src.dir}">
                    <filename name="*.java"/>
                    <exclude name="junit/PreTest*.java" />
                </fileset>
                <fileset dir="${annotations.src.dir}">
                    <exclude name="junit/PreTest*.java" />
                    <filename name="*.java"/>
                </fileset>
                <fileset dir="${sootUtils.src.dir}">
                    <exclude name="junit/PreTest*.java" />
                    <filename name="*.java"/>
                </fileset>
            </path>
            
          <!--   <javadoc sourcepathref="classpath.javadoc" destdir="${javadoc.home}">
            </javadoc> -->
        </target>
        
      <!-- Cleanup after the ant script -->
        <target name="cleanup.soot" if="${enable.soot.compile}">
            <delete dir="${soot.build.dir}" />
        </target>
        
        <target name="cleanup.other">
            <delete dir="${temp.home}" />
            <delete dir="${taintTracking.build.dir}" />
            <delete dir="${annotations.build.dir}" />
            <delete dir="${sootUtils.build.dir}" />
            <delete dir="${testcases.build.dir}" />
            <delete>
                <fileset dir="${jimple.home}">
                    <include name="security.*.jimple"/>
                    <exclude name="security.SootSecurityLevel.jimple"/>
                </fileset>
            </delete>
        </target>
    
        <target name="cleanup" depends="javadoc, cleanup.soot, cleanup.other">
            <echo level="info">CLEANUP SUCCESSFUL.</echo>
        </target>
        
      <!-- End of the script -->
        <target name="end" depends="cleanup">
            <echo level="info">END</echo>
        </target>

</project>